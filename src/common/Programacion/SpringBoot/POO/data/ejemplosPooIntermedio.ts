export const ejemplosPooIntermedio = [
    {
        id: 1,
        titulo: "Encapsulamiento y Constructores",
        descripcion: "Uso de constructor para inicializar valores y encapsulamiento con atributos privados y m√©todos de acceso.",
        codigo: `public class Producto {
          // Atributos privados (encapsulados)
          private String nombre;
          private double precio;
      
          // Constructor para inicializar atributos
          public Producto(String nombre, double precio) {
              this.nombre = nombre;
              this.precio = precio;
          }
      
          // M√©todo getter para obtener el nombre
          public String getNombre() {
              return nombre;
          }
      
          // M√©todo setter para cambiar el nombre
          public void setNombre(String nombre) {
              this.nombre = nombre;
          }
      
          // M√©todo getter para obtener el precio
          public double getPrecio() {
              return precio;
          }
      
          // M√©todo setter para cambiar el precio
          public void setPrecio(double precio) {
              this.precio = precio;
          }
      
          // M√©todo para mostrar la informaci√≥n del producto
          public void mostrar() {
              System.out.println("Producto: " + nombre);
              System.out.println("Precio: S/ " + precio);
          }
      
          public static void main(String[] args) {
              Producto p = new Producto("Laptop", 2800.50);
              p.mostrar();
      
              // Modificando valores con setters
              p.setNombre("Monitor");
              p.setPrecio(850.00);
              p.mostrar();
          }
      }`,
        resultado: `Producto: Laptop
      Precio: S/ 2800.5
      Producto: Monitor
      Precio: S/ 850.0`,
        explicacion: `üß† **Explicaci√≥n detallada:**
      
      - üîí \`private String nombre;\`, \`private double precio;\`: Se encapsulan los atributos, es decir, no se puede acceder directamente desde fuera de la clase.
      - üî® \`public Producto(...)\`: Es un **constructor**, que permite inicializar los valores de los atributos al crear un objeto.
      - üì• \`setNombre(...)\`, \`setPrecio(...)\`: Son m√©todos *setters* que permiten modificar los valores encapsulados.
      - üì§ \`getNombre()\`, \`getPrecio()\`: Son m√©todos *getters* que devuelven el valor actual de los atributos.
      - üñ®Ô∏è \`mostrar()\`: Muestra los datos almacenados en los atributos.
      - üß™ En \`main()\`, se crea un objeto con valores iniciales usando el constructor y luego se modifican con los setters.
      
      üìå Conceptos aplicados:
      - **Encapsulamiento**: Controlar el acceso a los datos internos de un objeto.
      - **Constructor**: M√©todo especial que se ejecuta al crear un objeto y se usa para inicializarlo.
      - **M√©todos de acceso**: *getters* y *setters* permiten leer y modificar atributos encapsulados.
      - **Buenas pr√°cticas**: Usar encapsulamiento mejora la seguridad, mantenimiento y reutilizaci√≥n del c√≥digo.`  
      },
      {
        id: 2,
        titulo: "Asociaci√≥n entre Clases (Composici√≥n)",
        descripcion: "Una clase contiene otra clase como atributo, formando una relaci√≥n de 'tiene un'.",
        codigo: `// Clase Direcci√≥n
      public class Direccion {
          String ciudad;
          String pais;
      
          public Direccion(String ciudad, String pais) {
              this.ciudad = ciudad;
              this.pais = pais;
          }
      
          public void mostrarDireccion() {
              System.out.println("Ciudad: " + ciudad);
              System.out.println("Pa√≠s: " + pais);
          }
      }
      
      // Clase Persona que contiene un objeto Direccion
      public class Persona {
          String nombre;
          Direccion direccion; // Asociaci√≥n (composici√≥n)
      
          public Persona(String nombre, Direccion direccion) {
              this.nombre = nombre;
              this.direccion = direccion;
          }
      
          public void mostrarInformacion() {
              System.out.println("Nombre: " + nombre);
              direccion.mostrarDireccion(); // Uso del objeto Direccion
          }
      
          public static void main(String[] args) {
              Direccion d = new Direccion("Lima", "Per√∫");
              Persona p = new Persona("Luc√≠a", d);
              p.mostrarInformacion();
          }
      }`,
        resultado: `Nombre: Luc√≠a
      Ciudad: Lima
      Pa√≠s: Per√∫`,
        explicacion: `üß† **Explicaci√≥n detallada:**
      
      - üì¶ **Composici√≥n**: Es una relaci√≥n en la que una clase incluye otra como parte de su estructura. En este caso, \`Persona\` "tiene una" \`Direccion\`.
      - üß± \`Direccion\`: Es una clase independiente que representa una ubicaci√≥n con ciudad y pa√≠s.
      - üîó \`Direccion direccion;\`: En la clase \`Persona\`, se declara un atributo que es una instancia de otra clase.
      - üõ†Ô∏è \`new Direccion("Lima", "Per√∫")\`: Se crea un objeto direcci√≥n.
      - üßç \`new Persona("Luc√≠a", d)\`: Se crea una persona que tiene como direcci√≥n el objeto creado anteriormente.
      - üìû \`direccion.mostrarDireccion();\`: La clase \`Persona\` invoca un m√©todo de la clase \`Direccion\`.
      
      üìå **Conceptos aplicados:**
      - **Composici√≥n**: Representa una relaci√≥n fuerte de dependencia entre clases, donde una clase contiene otra como parte de su definici√≥n.
      - **Reutilizaci√≥n**: Permite separar responsabilidades y reutilizar clases independientes.
      - **Organizaci√≥n del c√≥digo**: Facilita el modelado del mundo real, ya que los objetos pueden estar compuestos por otros objetos.`  
      }
  ];
  